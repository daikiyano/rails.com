# Ruby CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-ruby/ for more details
#
version: 2
jobs:
  build:
    docker:
      # specify the version you desire here
       - image: circleci/ruby:2.4.2-node-browsers

      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # - image: circleci/postgres:9.4

    working_directory: /home/circleci/rails.com

    steps:
      - checkout
    

      # Download and cache dependencies
      - restore_cache:
          keys:
          - v1-dependencies-{{ checksum "Gemfile.lock" }}
          # fallback to using the latest cache if no exact match is found
          - v1-dependencies-

      - run:
          name: install dependencies
          command: |
            bundle install --jobs=4 --retry=3 --path vendor/bundle

      - save_cache:
          paths:
            - ./vendor/bundle
          key: v1-dependencies-{{ checksum "Gemfile.lock" }}

        #production
      - add_ssh_keys:
          fingerprints:
            - "d3:50:3f:5f:ec:0c:00:36:c2:fb:55:df:95:8c:f3:85"
      # Database setup
      # - run: bundle exec rake db:create
      # - run: bundle exec rake db:schema:load

      # run tests!
      # - run:
      #     name: run tests
      #     command: |
      #       mkdir /tmp/test-results
      #       TEST_FILES="$(circleci tests glob "spec/**/*_spec.rb" | circleci tests split --split-by=timings)"
      #
      #       bundle exec rspec --format progress \
      #                       --format RspecJunitFormatter \
      #                       --out /tmp/test-results/rspec.xml \
      #                       --format progress \
      #                       $TEST_FILES

      # collect reports
      # - store_test_results:
      #     path: /tmp/test-results
      # - store_artifacts:
      #     path: /tmp/test-results
      #     destination: test-results

      # - run:
      #     name: Start ssh-agent
      #     command: |
      #       ssh-agent -s > ~/.ssh_agent_conf
      #       source ~/.ssh_agent_conf
      #       for _k in $(ls ${HOME}/.ssh/id_*); do
      #         ssh-add ${_k} || true
      #       done
      #

      - deploy:
          name: Start deploy
          command: |
            if [ "${CIRCLE_BRANCH}" == "master" ]; then
                ssh-keyscan -p ${PORT_NUMBER} ${PRODUCTION_HOST_NAME} >> ~/.ssh/known_hosts
                bundle exec cap production deploy
            fi
